# -*- coding: utf-8 -*-
"""ES1821013343_HHRS_PT2_CODIGO_14_OCT_2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GXj-JDtSP_CqcRAXkd0BUf-M1xD6TPc2
"""

################################################################################
#                                                                              #
#  Universidad Abierta y a Distancia de México                                 #
#  División de Ciencias Exactas, Ingeniería y Tecnología                       #
#  Licenciatura en Matemáticas                                                 #
#  Proyecto: Aplicación de técnicas de investigación de operaciones para       #
#            optimizar la asignación de horarios de trabajo en el ámbito       #
#            educativo: un enfoque específico en Escuelas Secundarias de       #
#            Aguascalientes                                                    #
#  Estudiante:  Héctor Humberto Rodríguez Silva                                #
#  Matrícula:   ES1821013343                                                   #
#  Asesor Interno:  Dra. María del Alba Pacheco Blas                           #
#  Sinodales:       Mtro. Orlando Fabián Echeverría Alonso                     #
#                   Mtra. Laura Granados González                              #
#  Asesor Externo:  Mtro. Humberto Rodríguez Gómez                             #
#                                                                              #
#  Aguascalientes, Ags. a 14 de octubre de 2024                                #
#                                                                              #
################################################################################

# Instalar PuLP (Bilioteca para resolver problemas de programación lineal y optimización)
!pip install pulp

import pulp as lp
import numpy as np
import pandas as pd
from IPython.display import display

# Definición de las listas de grupos, días, clases, disciplinas y profesores
grupos = ["1A", "1B", "1C", "1D", "1E", "1F", "2A", "2B", "2C", "2D", "2E", "2F", "3A", "3B", "3C", "3D", "3E", "3F"]
dias = ["Lunes", "Martes", "Miércoles", "Jueves", "Viernes"]
clases = ["Clase de 7 a 8 am", "Clase de 8 a 9 am", "Clase de 9 a 10 am", "Clase de 10 a 11 am",
          "Clase de 11 am a 12 pm", "Clase de 12 pm a 1 pm", "Clase de 1 a 2 pm"]

disciplinas = [
    "Artes", "Ciencias", "Educación Física", "Español", "Formación Cívica y Ética", "Geografía",
    "Historia", "Inglés", "Integración Curricular", "Laboratorio", "Matemáticas", "Tecnología", "Tutoría",
]

profesores = [
    "Juan Carlos Marín Esquivel", "Manuela Ramírez Medina", "Olga Herrera Mireles",
    "Alfredo Alexis Morales Flores", "Mayela Ríos González", "Irene Berenice Terrones Hernández",
    "María del Socorro Bañuelos Casa", "Marco Arturo Fajardo Medina", "Francisco Javier Gallardo Delgado",
    "Olaya Janeth Montes Oliva", "Alejandro Vargas Castañeda", "Héctor De León Dávalos",
    "Marco Antonio Ávila Alcalá", "Georgina Selene Guerra Marín", "Claudia Cecilia Luevano López",
    "Sergio González Landín", "Leslie Bermejillo Cuevas", "Aldo Omar Saucedo Reyes", "César Núñez Soto",
    "Alma Cecilia Esparza Palos", "Susana Gabriela Gutiérrez Cantú", "Ma. Guadalupe Rendón Álvarez",
    "Silvia Verónica Flores Zamora", "María Fernanda Díaz Torres", "Viridiana Mendoza Medina",
    "Araceli de Jesús Mardujano Cardona", "Mónica Elizabeth Hernández Capetillo", "Roberto Manríquez Herrera",
    "Robin Emmanuel Ramírez Gómez", "José Antonio Ontiveros García", "Sara Elena Richart García",
    "Héctor Humberto Rodríguez Silva", "Juan Jesús Cervantes Montoya", "Anshany Esmeralda De Loera Olivas",
    "Ángel Arellano Ruiz", "Noemí Rangel Carpio", "Leticia Rivera Ávila", "Ma. Esther Montoya Melchor"
]

# Mapeo de asignaciones profesor-disciplina
asignaciones_profesor_disciplina = {
    "Juan Carlos Marín Esquivel": ["Español"],
    "Manuela Ramírez Medina": ["Español"],
    "Olga Herrera Mireles": ["Español"],
    "Alfredo Alexis Morales Flores": ["Inglés"],
    "Mayela Ríos González": ["Inglés"],
    "Irene Berenice Terrones Hernández": ["Inglés"],
    "María del Socorro Bañuelos Casa": ["Matemáticas"],
    "Marco Arturo Fajardo Medina": ["Matemáticas", "Tutoría"],
    "Francisco Javier Gallardo Delgado": ["Matemáticas"],
    "Olaya Janeth Montes Oliva": ["Ciencias", "Tutoría"],
    "Alejandro Vargas Castañeda": ["Ciencias"],
    "Héctor De León Dávalos": ["Ciencias"],
    "Marco Antonio Ávila Alcalá": ["Ciencias"],
    "Georgina Selene Guerra Marín": ["Ciencias"],
    "Claudia Cecilia Luevano López": ["Ciencias"],
    "Sergio González Landín": ["Ciencias", "Integración Curricular", "Tutoría"],
    "Leslie Bermejillo Cuevas": ["Tutoría", "Geografía"],
    "Aldo Omar Saucedo Reyes": ["Tutoría", "Geografía"],
    "César Núñez Soto": ["Geografía"],
    "Alma Cecilia Esparza Palos": ["Geografía"],
    "Susana Gabriela Gutiérrez Cantú": ["Geografía"],
    "Ma. Guadalupe Rendón Álvarez": ["Tutoría", "Historia"],
    "Silvia Verónica Flores Zamora": ["Tutoría", "Historia"],
    "María Fernanda Díaz Torres": ["Historia"],
    "Viridiana Mendoza Medina": ["Formación Cívica y Ética"],
    "Araceli de Jesús Mardujano Cardona": ["Formación Cívica y Ética"],
    "Mónica Elizabeth Hernández Capetillo": ["Formación Cívica y Ética"],
    "Roberto Manríquez Herrera": ["Educación Física"],
    "Robin Emmanuel Ramírez Gómez": ["Educación Física"],
    "José Antonio Ontiveros García": ["Tecnología"],
    "Sara Elena Richart García": ["Tecnología"],
    "Héctor Humberto Rodríguez Silva": ["Tecnología", "Artes"],
    "Juan Jesús Cervantes Montoya": ["Artes"],
    "Anshany Esmeralda De Loera Olivas": ["Artes"],
    "Ángel Arellano Ruiz": ["Artes"],
    "Noemí Rangel Carpio": ["Tutoría", "Integración Curricular"],
    "Leticia Rivera Ávila": ["Tutoría", "Integración Curricular"],
    "Ma. Esther Montoya Melchor": ["Laboratorio"],
}

# Definición del problema
prob = lp.LpProblem("Asignación_de_Horarios", lp.LpMaximize)

# Variables de decisión
x = lp.LpVariable.dicts("x", (range(len(grupos)), range(len(dias)), range(len(clases)), range(len(disciplinas)), range(len(profesores))),
                       cat='Binary')

# Función objetivo: maximizar el número de disciplinas asignadas
prob += lp.lpSum(x[i][j][k][l][m] for i in range(len(grupos))
                                   for j in range(len(dias))
                                   for k in range(len(clases))
                                   for l in range(len(disciplinas))
                                   for m in range(len(profesores)))

# Restricción 1: Un profesor puede impartir como mínimo 1 clase a la semana y como máximo 7 clases al día y 35 clases a la semana
for m in range(len(profesores)):
    for j in range(len(dias)):
        prob += lp.lpSum(x[i][j][k][l][m] for i in range(len(grupos))
                                               for k in range(len(clases))
                                               for l in range(len(disciplinas))) <= 7
    prob += lp.lpSum(x[i][j][k][l][m] for i in range(len(grupos))
                                     for j in range(len(dias))
                                     for k in range(len(clases))
                                     for l in range(len(disciplinas))) <= 35

# Restricción 2: Un profesor puede impartir como máximo 7 clases al día y como máximo 35 clases a la semana
for i in range(len(grupos)):
    for j in range(len(dias)):
        prob += lp.lpSum(x[i][j][k][l][m] for k in range(len(clases))
                                               for l in range(len(disciplinas))
                                               for m in range(len(profesores))) == 7

# Restricción 3: Un profesor solo puede ser asignado a sus disciplinas correspondientes
for m in range(len(profesores)):
    for l in range(len(disciplinas)):
        if disciplinas[l] not in asignaciones_profesor_disciplina[profesores[m]]:
            prob += lp.lpSum(x[i][j][k][l][m] for i in range(len(grupos))
                                                 for j in range(len(dias))
                                                 for k in range(len(clases))) == 0

# Restricción 4: Una disciplina se puede repetir máximo 2 veces en un mismo día para un mismo grupo
for i in range(len(grupos)):
    for j in range(len(dias)):
        for l in range(len(disciplinas)):
            prob += lp.lpSum(x[i][j][k][l][m] for k in range(len(clases))
                                               for m in range(len(profesores))) <= 2

# Restricción 5: No se puede asignar más de una disciplina a una misma clase en el mismo día
for i in range(len(grupos)):  # Para cada grupo
    for j in range(len(dias)):  # Para cada día
        for k in range(len(clases)):  # Para cada clase
            prob += lp.lpSum(x[i][j][k][l][m] for l in range(len(disciplinas)) for m in range(len(profesores))) <= 1

# Definición de los pesos para cada disciplina
pesos_disciplinas = {
    "Matemáticas": 10,             # Peso muy alto
    "Laboratorio": 9,              # Peso muy alto
    "Ciencias": 8,                 # Peso alto
    "Inglés": 7,                   # Peso alto
    "Tecnología": 6,               # Peso medio
    "Español": 5,                  # Peso medio
    "Historia": 5,                 # Peso medio
    "Geografía": 4,                # Peso bajo
    "Formación Cívica y Ética": 4, # Peso bajo
    "Tutoría": 3,                  # Peso bajo
    "Educación Física": 3,         # Peso bajo
    "Artes": 2,                    # Peso muy bajo
    "Integración Curricular": 1,   # Peso muy bajo
}

# Ordenar disciplinas según sus pesos de mayor a menor
orden_disciplinas = sorted(pesos_disciplinas.keys(), key=pesos_disciplinas.get, reverse=True)

# Restricción 6: Un grupo debe recibir clases de todas las disciplinas priorizando por pesos
for i in range(len(grupos)):
    for l in range(len(disciplinas)):
        # La restricción se ajusta a que se asignen clases en función del peso de las disciplinas
        prob += lp.lpSum(pesos_disciplinas[disciplinas[l]] * x[i][j][k][l][m]
                         for j in range(len(dias))
                         for k in range(len(clases))
                         for m in range(len(profesores))) >= pesos_disciplinas[disciplinas[l]]

# Definición de los pesos para cada profesor, con base en el número de clases que imparten
pesos_profesores = {
    "Juan Carlos Marín Esquivel": 35,                 # Peso muy alto
    "Francisco Javier Gallardo Delgado": 35,          # Peso muy alto
    "Ma. Guadalupe Rendón Álvarez": 34,               # Peso muy alto
    "Alfredo Alexis Morales Flores": 33,              # Peso muy alto
    "Juan Jesús Cervantes Montoya": 33,               # Peso muy alto
    "Marco Arturo Fajardo Medina": 32,                # Peso muy alto
    "Manuela Ramírez Medina": 30,                     # Peso alto
    "Roberto Manríquez Herrera": 28,                  # Peso alto
    "Olaya Janeth Montes Oliva": 26,                  # Peso alto
    "Olga Herrera Mireles": 25,                       # Peso alto
    "María del Socorro Bañuelos Casa": 25,            # Peso alto
    "Alejandro Vargas Castañeda": 24,                 # Peso medio
    "Héctor Humberto Rodríguez Silva": 24,            # Peso medio
    "Mónica Elizabeth Hernández Capetillo": 20,       # Peso medio
    "Mayela Ríos González": 18,                       # Peso medio
    "Héctor De León Dávalos": 18,                     # Peso medio
    "José Antonio Ontiveros García": 18,              # Peso medio
    "Sara Elena Richart García": 18,                  # Peso medio
    "Ma. Esther Montoya Melchor": 18,                 # Peso medio
    "María Fernanda Díaz Torres": 16,                 # Peso medio
    "Silvia Verónica Flores Zamora": 13,              # Peso bajo
    "Marco Antonio Ávila Alcalá": 12,                 # Peso bajo
    "Araceli de Jesús Mardujano Cardona": 12,         # Peso bajo
    "Anshany Esmeralda De Loera Olivas": 12,          # Peso bajo
    "Leticia Rivera Ávila": 11,                       # Peso bajo
    "Leslie Bermejillo Cuevas": 10,                   # Peso bajo
    "Noemí Rangel Carpio": 9,                         # Peso bajo
    "Robin Emmanuel Ramírez Gómez": 8,                # Peso bajo
    "Sergio González Landín": 8,                      # Peso bajo
    "Georgina Selene Guerra Marín": 6,                # Peso bajo
    "Claudia Cecilia Luevano López": 6,               # Peso bajo
    "Aldo Omar Saucedo Reyes": 5,                     # Peso muy bajo
    "César Núñez Soto": 4,                            # Peso muy bajo
    "Alma Cecilia Esparza Palos": 4,                  # Peso muy bajo
    "Susana Gabriela Gutiérrez Cantú": 4,             # Peso muy bajo
    "Viridiana Mendoza Medina": 4,                    # Peso muy bajo
    "Irene Berenice Terrones Hernández": 3,           # Peso muy bajo
    "Ángel Arellano Ruíz": 3,                         # Peso muy bajo
}

# Ordenar profesores según sus pesos de mayor a menor
orden_profesores = sorted(pesos_profesores.keys(), key=pesos_profesores.get, reverse=True)

# Restricción 7: Un grupo debe recibir clases de todos los profesores priorizando por pesos
for i in range(len(grupos)):
    for m in range(len(profesores)):
        # La restricción se ajusta a que se asignen clases en función del peso de los profesores
        prob += lp.lpSum(pesos_profesores.get(profesores[m], 0) * x[i][j][k][l][m]
                 for j in range(len(dias))
                 for k in range(len(clases))
                 for m in range(len(profesores)))

# Resolviendo el problema
prob.solve()

# Imprimir los horarios generados para cada grupo y día
for i in range(len(grupos)):
    for j in range(len(dias)):
        tabla_horarios = []
        for k in range(len(clases)):
            for l in range(len(disciplinas)):
                for m in range(len(profesores)):
                    if lp.value(x[i][j][k][l][m]) == 1:
                        tabla_horarios.append([clases[k], disciplinas[l], profesores[m]])

        # Crear DataFrame para mostrar los resultados en formato de tabla
        df_horarios = pd.DataFrame(tabla_horarios, columns=["Clase", "Disciplina", "Profesor"])
        print(f"Horario para el grupo {grupos[i]} el día {dias[j]}:")
        display(df_horarios)
        print("\n" + "-"*50 + "\n")